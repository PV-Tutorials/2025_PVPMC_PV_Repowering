Traceback (most recent call last):
  File "C:\ProgramData\anaconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Set up base case
pv_model = pvwatts.default("Pvwattsv8Commercial")
ur_model = ur.from_existing(pv_model)
grid_model = grid.from_existing(pv_model)
fin_model = res.from_existing(pv_model)

for json_file in os.listdir('PBL 3_Data'):
    # get the inputs from the JSON file
    with open( 'PBL 3_Data/' + json_file, 'r') as f:
            pv_inputs = json.load( f )
    
    # iterate through the input key-value pairs and set the module inputs
    for k, v in pv_inputs.items():
        if k != 'number_inputs':
            try:
                pv_model.value(k, v)
            except:
                try:
                    ur_model.value(k, v)
                except:
                    try:
                        grid_model.value(k, v)
                    except:
                        try:
                            fin_model.value(k, v)
                        except:
                            print("Variable not found in modules")

# grid_model = grid.from_existing(pv_model)
# ur_model = ur.from_existing(pv_model)
# fin_model = com.from_existing(pv_model)

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mException[0m                                 Traceback (most recent call last)
Cell [1;32mIn[3], line 2[0m
[0;32m      1[0m [38;5;66;03m# Set up base case[39;00m
[1;32m----> 2[0m pv_model [38;5;241m=[39m pvwatts[38;5;241m.[39mdefault([38;5;124m"[39m[38;5;124mPvwattsv8Commercial[39m[38;5;124m"[39m)
[0;32m      3[0m ur_model [38;5;241m=[39m ur[38;5;241m.[39mfrom_existing(pv_model)
[0;32m      4[0m grid_model [38;5;241m=[39m grid[38;5;241m.[39mfrom_existing(pv_model)

[1;31mException[0m: Default configuration by that name was not found.

